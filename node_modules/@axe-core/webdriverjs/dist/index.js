"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var axe_core_1 = require("axe-core");
var index_1 = require("./utils/index");
var axe_injector_1 = require("./axe-injector");
var browser_1 = require("./browser");
var assert = require("assert");
var AxeBuilder = /** @class */ (function () {
    function AxeBuilder(driver, axeSource, builderOptions) {
        this.legacyMode = false;
        this.driver = driver;
        this.axeSource = axeSource || axe_core_1.source;
        this.includes = [];
        this.excludes = [];
        this.option = {};
        this.config = null;
        this.builderOptions = builderOptions || {};
    }
    /**
     * Selector to include in analysis.
     * This may be called any number of times.
     */
    AxeBuilder.prototype.include = function (selector) {
        selector = Array.isArray(selector) ? selector : [selector];
        this.includes.push(selector);
        return this;
    };
    /**
     * Selector to exclude in analysis.
     * This may be called any number of times.
     */
    AxeBuilder.prototype.exclude = function (selector) {
        selector = Array.isArray(selector) ? selector : [selector];
        this.excludes.push(selector);
        return this;
    };
    /**
     * Set options to be passed into axe-core
     */
    AxeBuilder.prototype.options = function (options) {
        this.option = options;
        return this;
    };
    /**
     * Limit analysis to only the specified rules.
     * Cannot be used with `AxeBuilder#withTags`
     */
    AxeBuilder.prototype.withRules = function (rules) {
        rules = Array.isArray(rules) ? rules : [rules];
        this.option.runOnly = {
            type: 'rule',
            values: rules
        };
        return this;
    };
    /**
     * Limit analysis to only specified tags.
     * Cannot be used with `AxeBuilder#withRules`
     */
    AxeBuilder.prototype.withTags = function (tags) {
        tags = Array.isArray(tags) ? tags : [tags];
        this.option.runOnly = {
            type: 'tag',
            values: tags
        };
        return this;
    };
    /**
     * Set the list of rules to skip when running an analysis.
     */
    AxeBuilder.prototype.disableRules = function (rules) {
        rules = Array.isArray(rules) ? rules : [rules];
        this.option.rules = {};
        for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
            var rule = rules_1[_i];
            this.option.rules[rule] = { enabled: false };
        }
        return this;
    };
    /**
     * Set configuration for `axe-core`.
     * This value is passed directly to `axe.configure()`
     */
    AxeBuilder.prototype.configure = function (config) {
        if (typeof config !== 'object') {
            throw new Error('AxeBuilder needs an object to configure. See axe-core configure API.');
        }
        this.config = config;
        return this;
    };
    /**
     * Performs an analysis and retrieves results.
     */
    AxeBuilder.prototype.analyze = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        return _this.analyzePromise()
                            .then(function (results) {
                            callback === null || callback === void 0 ? void 0 : callback(null, results);
                            resolve(results);
                        })
                            .catch(function (err) {
                            // When using a callback, do *not* reject the wrapping Promise. This prevents having to handle the same error twice.
                            if (callback) {
                                callback(err, null);
                            }
                            else {
                                reject(err);
                            }
                        });
                    })];
            });
        });
    };
    /**
     * Use frameMessenger with <same_origin_only>
     *
     * This disables use of axe.runPartial() which is called in each frame, and
     * axe.finishRun() which is called in a blank page. This uses axe.run() instead,
     * but with the restriction that cross-origin frames will not be tested.
     */
    AxeBuilder.prototype.setLegacyMode = function (legacyMode) {
        if (legacyMode === void 0) { legacyMode = true; }
        this.legacyMode = legacyMode;
        return this;
    };
    /**
     * Analyzes the page, returning a promise
     */
    AxeBuilder.prototype.analyzePromise = function () {
        return __awaiter(this, void 0, void 0, function () {
            var context, runPartialSupported, partials, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        context = (0, index_1.normalizeContext)(this.includes, this.excludes);
                        return [4 /*yield*/, this.driver.switchTo().defaultContent()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (0, browser_1.axeSourceInject)(this.driver, this.axeSource, this.config)];
                    case 2:
                        runPartialSupported = (_a.sent()).runPartialSupported;
                        if (runPartialSupported !== true || this.legacyMode) {
                            return [2 /*return*/, this.runLegacy(context)];
                        }
                        return [4 /*yield*/, this.runPartialRecursive(context, true)];
                    case 3:
                        partials = _a.sent();
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this.finishRun(partials)];
                    case 5: return [2 /*return*/, _a.sent()];
                    case 6:
                        error_1 = _a.sent();
                        throw new Error(error_1.message + "\n Please check out https://github.com/dequelabs/axe-core-npm/blob/develop/packages/webdriverjs/error-handling.md");
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Use axe.run() to get results from the page
     */
    AxeBuilder.prototype.runLegacy = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, driver, axeSource, builderOptions, config, injector;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this, driver = _a.driver, axeSource = _a.axeSource, builderOptions = _a.builderOptions;
                        config = this.config;
                        if (this.legacyMode !== true) {
                            config = __assign(__assign({}, (config || {})), { allowedOrigins: ['<unsafe_all_origins>'] });
                        }
                        injector = new axe_injector_1.default({
                            driver: driver,
                            axeSource: axeSource,
                            config: config,
                            builderOptions: builderOptions
                        });
                        return [4 /*yield*/, injector.injectIntoAllFrames()];
                    case 1:
                        _b.sent();
                        return [2 /*return*/, (0, browser_1.axeRunLegacy)(this.driver, context, this.option, this.config)];
                }
            });
        });
    };
    /**
     * Get partial results from the current context and its child frames
     */
    AxeBuilder.prototype.runPartialRecursive = function (context, initiator) {
        if (initiator === void 0) { initiator = false; }
        return __awaiter(this, void 0, void 0, function () {
            var frameContexts, partials, _i, frameContexts_1, _a, frameContext, frameSelector, frame, switchedFrame, _b, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        if (!!initiator) return [3 /*break*/, 2];
                        return [4 /*yield*/, (0, browser_1.axeSourceInject)(this.driver, this.axeSource, this.config)];
                    case 1:
                        _f.sent();
                        _f.label = 2;
                    case 2: return [4 /*yield*/, (0, browser_1.axeGetFrameContext)(this.driver, context)];
                    case 3:
                        frameContexts = _f.sent();
                        return [4 /*yield*/, (0, browser_1.axeRunPartial)(this.driver, context, this.option)];
                    case 4:
                        partials = [
                            _f.sent()
                        ];
                        _i = 0, frameContexts_1 = frameContexts;
                        _f.label = 5;
                    case 5:
                        if (!(_i < frameContexts_1.length)) return [3 /*break*/, 14];
                        _a = frameContexts_1[_i], frameContext = _a.frameContext, frameSelector = _a.frameSelector, frame = _a.frame;
                        switchedFrame = false;
                        _f.label = 6;
                    case 6:
                        _f.trys.push([6, 10, , 13]);
                        assert(frame, "Expect frame of \"" + frameSelector + "\" to be defined");
                        return [4 /*yield*/, this.driver.switchTo().frame(frame)];
                    case 7:
                        _f.sent();
                        switchedFrame = true;
                        _c = (_b = partials.push).apply;
                        _d = [partials];
                        return [4 /*yield*/, this.runPartialRecursive(frameContext)];
                    case 8:
                        _c.apply(_b, _d.concat([(_f.sent())]));
                        return [4 /*yield*/, this.driver.switchTo().parentFrame()];
                    case 9:
                        _f.sent();
                        return [3 /*break*/, 13];
                    case 10:
                        _e = _f.sent();
                        if (!switchedFrame) return [3 /*break*/, 12];
                        return [4 /*yield*/, this.driver.switchTo().parentFrame()];
                    case 11:
                        _f.sent();
                        _f.label = 12;
                    case 12:
                        partials.push('null');
                        return [3 /*break*/, 13];
                    case 13:
                        _i++;
                        return [3 /*break*/, 5];
                    case 14: return [2 /*return*/, partials];
                }
            });
        });
    };
    /**
     * Use axe.finishRun() to turn partial results into actual results
     */
    AxeBuilder.prototype.finishRun = function (partials) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, driver, axeSource, config, option, win, handlers, error_2, res;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this, driver = _a.driver, axeSource = _a.axeSource, config = _a.config, option = _a.option;
                        return [4 /*yield*/, driver.getWindowHandle()];
                    case 1:
                        win = _b.sent();
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 7, , 8]);
                        return [4 /*yield*/, driver.executeScript("window.open('about:blank')")];
                    case 3:
                        _b.sent();
                        return [4 /*yield*/, driver.getAllWindowHandles()];
                    case 4:
                        handlers = _b.sent();
                        return [4 /*yield*/, driver.switchTo().window(handlers[handlers.length - 1])];
                    case 5:
                        _b.sent();
                        return [4 /*yield*/, driver.get('about:blank')];
                    case 6:
                        _b.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        error_2 = _b.sent();
                        throw new Error("switchTo failed. Are you using updated browser drivers? \nDriver reported:\n" + error_2);
                    case 8: return [4 /*yield*/, (0, browser_1.axeFinishRun)(driver, axeSource, config, partials, option)];
                    case 9:
                        res = _b.sent();
                        return [4 /*yield*/, driver.close()];
                    case 10:
                        _b.sent();
                        return [4 /*yield*/, driver.switchTo().window(win)];
                    case 11:
                        _b.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    return AxeBuilder;
}());
exports = module.exports = AxeBuilder;
exports.default = AxeBuilder;
//# sourceMappingURL=index.js.map